<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mingcai.edu.modules.oa.dao.eos.OaEosProStartDao">
    
	<sql id="oaEosProStartColumns">
		a.id AS "id",
		a.flow_id AS "flow.id",
		a.person_liable_user AS "personLiableUser.id",
		owu.avatar AS "personLiableUser.wxUsers.avatar",
		u3.name as "personLiableUser.name",
		a.contract_amount/100 AS "contractAmount",
		a.estimated_amount/100 AS "estimatedAmount",
		a.gross_profit_margin AS "grossProfitMargin",
		a.status AS "status",
		a.user_ids AS "userIds",
		a.budgetary AS "budgetary",
		a.deferred AS "deferred",
		a.progress AS "progress",
		a.create_by AS "createBy.id",
		d.name AS "createBy.name",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		a.settlement as "settlement",
		b.name AS "pro.name",
		b.pa_number AS "pro.paNumber",
		b.pro_number AS "pro.proNumber",
		b.person_liable_user AS "pro.personLiableUser.id",
		owu1.avatar AS "pro.personLiableUser.wxUsers.avatar",
		c.name AS "pro.personLiableUser.name",
		b.customer_name AS "pro.customerName",
		b.customer_user AS "pro.customerUser",
		b.customer_contact_information AS "pro.customerContactInformation",
		b.status AS "pro.status",
		b.pro_type AS "pro.proType",
		b.pro_location AS "pro.proLocation",
		b.pro_capital_source AS "pro.proCapitalSource",
		b.pro_budget AS "pro.proBudget",
		b.pro_cycle AS "pro.proCycle",
		b.pro_content AS "pro.proContent",
		b.estimated_amount AS "pro.estimatedAmount",
		b.gross_profit_margin AS "pro.grossProfitMargin",
		b.input_estimation AS "pro.inputEstimation",
		b.workload AS "pro.workload",
		b.user_ids AS "pro.userIds",
		b.to_examine AS "pro.toExamine",
		b.approval AS "pro.approval",
		b.create_by AS "pro.createBy.id",
		b.create_date AS "pro.createDate",
		b.update_by AS "pro.updateBy.id",
		b.update_date AS "pro.updateDate",
		b.del_flag AS "pro.delFlag",
		b.remarks AS "pro.remarks",
		a.real_input_estimation/100 as "realInputEstimation"
		</sql>
	
	<sql id="oaEosProStartJoins">
		LEFT JOIN sys_user u3 ON u3.id = a.person_liable_user
		Left join oa_eos_pro b on b.id=a.id
		Left join sys_user c on c.id=b.person_liable_user
		Left join sys_user d on d.id=a.create_by
		LEFT JOIN oa_wx_users owu ON owu.mobile = u3.mobile
		LEFT JOIN oa_wx_users owu1 ON owu1.mobile = c.mobile
	</sql>
    
	<select id="get" resultType="OaEosProStart">
		SELECT 
			<include refid="oaEosProStartColumns"/>
		FROM oa_eos_pro_start a
		<include refid="oaEosProStartJoins"/>
		WHERE a.id = #{id} and a.del_flag =0
	</select>
    <select id="findListByFlowFinishUser" resultType="OaEosProStart">
        SELECT
        <include refid="oaEosProStartColumns"/>,
        flow.create_date as "flow.createDate"
        FROM oa_eos_pro_start a
        <include refid="oaEosProStartJoins"/>
        LEFT JOIN oa_eos_flow_item flow ON flow.flow_id = a.flow_id
        <where>
            a.del_flag = #{DEL_FLAG_NORMAL}
            AND flow.user_id=#{userId}  and (flow.status=1 or flow.status=-1)
		</where>
        group by a.id
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY flow.create_date desc
            </otherwise>
        </choose>

    </select>
    <select id="findListByUser" resultType="OaEosProStart">
        SELECT
        <include refid="oaEosProStartColumns"/>,
        flow.create_date as "flow.createDate"
        FROM oa_eos_pro_start a
        <include refid="oaEosProStartJoins"/>
        RIGHT JOIN oa_eos_flow_item flow ON flow.flow_id = a.flow_id
        <where>
            a.del_flag = #{DEL_FLAG_NORMAL}
            AND flow.user_id=#{userId} and a.status=1 and flow.status=0
        </where>
        group by a.id
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY flow.create_date desc
            </otherwise>
        </choose>

    </select>
	<select id="findList" resultType="OaEosProStart">
		SELECT 
			<include refid="oaEosProStartColumns"/>
		FROM oa_eos_pro_start a
		<include refid="oaEosProStartJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="!leader">
				AND (a.update_by = #{userId} OR  a.create_by = #{userId} OR  a.person_liable_user = #{userId} OR  b.person_liable_user = #{userId})
			</if>
			<if test="status== 2">
				AND a.status=#{status}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date DESC
			</otherwise>
		</choose>
	</select>
	<select id="findPcList" resultType="OaEosProStart">
		SELECT
		<include refid="oaEosProStartColumns"/>
		FROM oa_eos_pro_start a
		<include refid="oaEosProStartJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="!leader">
				AND (a.update_by = #{userId} OR  a.create_by = #{userId} OR  a.person_liable_user = #{userId} OR  b.person_liable_user = #{userId})
			</if>
			<if test="name != null and name != ''">
				AND (b.name LIKE
				concat('%',#{name},'%') or b.pa_number LIKE
				concat('%',#{name},'%') or b.pro_number LIKE
				concat('%',#{name},'%'))
			</if>
			<if test="status != null and status != ''">
				AND a.status = #{status}
			</if>
			<if test="status ==0">
				AND a.status = #{status}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date DESC,a.update_date DESC
			</otherwise>
		</choose>
	</select>
	<select id="findAllList" resultType="OaEosProStart">
		SELECT 
			<include refid="oaEosProStartColumns"/>
		FROM oa_eos_pro_start a
		<include refid="oaEosProStartJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO oa_eos_pro_start(
			id,
			flow_id,
			person_liable_user,
			contract_amount,
			estimated_amount,
			gross_profit_margin,
			status,
			user_ids,
			budgetary,
			`deferred`,
			progress,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag,
			real_input_estimation,
			settlement
		) VALUES (
			#{id},
			#{flowId},
			#{personLiableUser.id},
			#{contractAmount}*100,
			#{estimatedAmount}*100,
			#{grossProfitMargin},
			#{status},
			#{userIds},
			#{budgetary},
			#{deferred},
			#{progress},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag},
			#{realInputEstimation}*100,
			#{settlement}
		)
	</insert>
	
	<update id="update">
		UPDATE oa_eos_pro_start SET 	
			person_liable_user = #{personLiableUser.id},
			contract_amount = #{contractAmount}*100,
			estimated_amount = #{estimatedAmount}*100,
			gross_profit_margin = #{grossProfitMargin},
			status = #{status},
			user_ids = #{userIds},
			budgetary = #{budgetary},
			`deferred` = #{deferred},
			progress = #{progress},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			real_input_estimation=#{realInputEstimation}*100,
			settlement = #{settlement}
		WHERE id = #{id}
	</update>
    <update id="updateAudit">
          UPDATE oa_eos_pro_start SET
        status = #{status},
        create_date = #{createDate},
        flow_id = #{flow.id}
        WHERE id = #{id}
    </update>
	<update id="delete">
		UPDATE oa_eos_pro_start SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	<update id="updatamoney">
			UPDATE oa_eos_pro_start SET
			real_input_estimation = #{realInputEstimation}*100
		WHERE id = #{id}
	</update>
</mapper>